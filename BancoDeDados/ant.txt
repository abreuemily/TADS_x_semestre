O PostgreSQL (também conhecido como Postgres) é um sistema de gerenciamento de banco de dados relacional de código aberto, conhecido por sua robustez, escalabilidade e capacidade de lidar com grandes volumes de dados. Sua arquitetura é projetada para oferecer alta performance e confiabilidade. Vamos explorar os principais componentes da arquitetura do PostgreSQL:

1. **Processos do PostgreSQL**:

   - **Postmaster**: É o processo principal que coordena a interação entre os clientes e o servidor de banco de dados. Ele gerencia a criação de novos processos para lidar com as conexões dos clientes.

   - **Processos de Backend**: Cada conexão de cliente é atendida por um processo de backend dedicado. Esses processos executam as consultas e transações solicitadas pelos clientes.

2. **Sistema de Armazenamento**:

   - **Arquivos de Dados**: O PostgreSQL armazena dados em arquivos no sistema de arquivos. Existem diferentes tipos de arquivos, como os de dados, índices e registros de transações.

   - **Buffer Cache**: O PostgreSQL mantém um cache de buffers em memória para reduzir a necessidade de acessos frequentes ao disco. Isso ajuda a melhorar o desempenho, pois muitas operações podem ser realizadas diretamente na memória.

3. **Gestão de Transações**:

   - **Controlador de Transações (Transaction Manager)**: Gerencia transações, garantindo que as operações sejam realizadas de forma consistente e que as propriedades ACID (Atomicidade, Consistência, Isolamento, Durabilidade) sejam mantidas.

4. **Otimizador de Consultas**:

   - **Planner**: É responsável por criar o plano de execução otimizado para as consultas. Ele decide a melhor maneira de recuperar os dados com base na estrutura do banco de dados e nas estatísticas disponíveis.

5. **Módulos de Funcionalidades Adicionais**:

   - **Extensões**: O PostgreSQL oferece um sistema de extensões que permite adicionar funcionalidades extras ao banco de dados, como linguagens de programação, tipos de dados personalizados, entre outros.

6. **Gerenciamento de Concorrência**:

   - **MVCC (Multi-Version Concurrency Control)**: O PostgreSQL utiliza o MVCC para permitir que várias transações ocorram simultaneamente sem interferir umas nas outras. Isso é fundamental para garantir a consistência dos dados em ambientes com múltiplos usuários.

7. **Gestão de Segurança**:

   - **Sistema de Autenticação e Autorização**: O PostgreSQL oferece um sistema robusto de autenticação e autorização para garantir que apenas usuários autorizados tenham acesso aos dados e operações permitidas.

8. **Recuperação de Falhas**:

   - **WAL (Write-Ahead Logging)**: O PostgreSQL utiliza uma técnica de log chamada Write-Ahead Logging para garantir a durabilidade dos dados em caso de falha. Isso significa que as alterações são registradas em um log antes de serem aplicadas aos dados no disco.

Esses são alguns dos principais componentes que compõem a arquitetura do PostgreSQL. É importante notar que o PostgreSQL é altamente configurável e oferece uma ampla gama de opções de configuração para atender às necessidades específicas de diferentes ambientes e aplicações.


-------------------------------------------------------------------------------

iremos aprender o que é postgres e sua arquitetura. 
- Introdução: O que é postgre e por que é tão famoso durante um período de tempo
este é um dos sgbds mais utilizados hoje em dia. Uma das características mais importantes do postgres é que ele é um banco de dados relacional de código aberto de classe empresarial. 
Ele suporta sql, que é uma linguagem de consulta estruturada, e json, ambos formatos para consulta. Está a mais de 20 anos em desenvolvimento na comunidade. sobre o uso, pode ser usado para data warehouse, aplicação geoespacial e análise de dados, por exemplo. ele suporta qualquer tipo de dado e é adequado para tipos avançados de dados. 
Sobre os recursos, ele possui a arquitetura MVCC (Cortrole de Simultaneidade Multi Versão), ou seja, o Postgres utiliza esse recurso para permitir que várias transações ocorram simultaneamente sem interferir umas nas outras. Mas, na verdade, esse recurso não existe apenas no postgres, ele está embutido em todos os outros bancos de dados relacionais, como o Oracle por exemplo. Mas a diferença é que o postgres é livre de custos e é open source. 
Tem tambem o controle de acesso granular, que permite que os administradores controlem quem pode acessar quais recursos do banco de dados e quais operações podem ser executadas, ou seja, você pode dar acesso a dados específicos, ou acesso as visualizações das tabelas, entre outras possibilidades. 
Tem também o conceito de espaços de tabelas que não sejam o padrão que podem ser criados, um espaço de tabela separado que pode conter todos os dados.
há um recurso de replicação assíncrona que é um método de replicação de dados que permite que os dados sejam escritos no servidor primário e depois copiados para o servidor secundário
os recursos de backup no postgre são: dump SQL, backup em nível de sistema de arquivos e arquivamento contínuo. O dump SQL é uma cópia dos dados em formato SQL . O utilitário pg_dump pode ser usado para criar um dump SQL. O backup em nível de sistema de arquivos é uma cópia dos arquivos do banco de dados. O backup em nível de sistema de arquivos é útil quando você precisa fazer backup de grandes quantidades de dados e a latência não é uma preocupação crítica. O arquivamento contínuo é um método de backup que permite que os dados sejam escritos no servidor primário e depois copiados para o servidor secundário.
E tem suporte para o conjunto de caracteres internacionais. 

arquitetura

Vou falar sobre a arquitetura do postgres. É um modelo cliente servidor, ou seja, o cliente envia uma solicitação para o postgres então temos algo chamado de parâmetros de memória, memória no centro e
os processos em segundo plano. Então o processo principal quando o servidor inicia o postmaster (processo principal que coordena a interação entre os clientes e o servidor de banco de dados. Ele gerencia a criação de novos processos para lidar com as conexões dos clientes)
então quando há uma solicitação do cliente vai diretamente para o postmaster. O postmaster irá verificar se tem todas as permissões necessárias para fazer login no banco de dados. Se passar disso então é gerado um processo de postges e, em seguida, o
o trabalho real começa. Então digamos que um instrução select foi disparada e que é armazenado no arquivo de dados, então primeiro
todos esses valores vêm para o burffer compartilhado e o postgres vai ler dali e então o valor é retornado de volta ao cliente. Então o aplicativo se conecta ao processo postmaster, o postmaster verifica o aplicativo corretamente, e se for bem sucedido, ele conecta o aplicativo cliente.
a instância não escreve ou lê o aplicativo diretamente ao arquivos de dados, mas coloca no buffer compartilhado e o processo postgres atua no buffer compartilhado e nos wal buffers (digamos que alguma modificação de dados ocorreu então esta area específica do buffer vai estar suja então usando o processo em segundo plano do write ahead log retorna para os walfilles, que são como arquivos de log pra onde toda a informação retorna e é armazenada permanentemente)
Então há um processo check pointer que verifica os check points em um determinado momento, o banco de dados estará consistente, então os dados nos arquivos de dados e na memória, vai ser liberado para os arquivos de dados.
Então nós temos a área de memória, o buffer compartilhado, wal buffers,   memória de trabalho e memória de trabalho de manutenção
Se o arquivador foi ativado, então os walfilles são movido para os walfilles arquivados

Então temos o processo postmaster que é o processo principal, temos
o processo postgres, estes são área de memória, buffer compartilhado, walbuffer, memória de trabalho, memória de manutenção de trabalho e o background writer que escreve o buffer sujo nos arquivos de dados,  é um processo em segundo plano que escolhe o valor alterado dos walbuffers e escreva para os walfilles. Se o arquivador estiver ativado então vai retornar para os walfilles arquivados
