n <- 25
n <- 25
n <- 25 ; x <- 4
rm(x)
seq(from = 0, to = 3.4, leng = n)
round(seq(from = 0, to = 3.4, leng = n), 10)
tt <- seq(from = 0, to = 3.4, leng = n)
roun(tt, 2)
round(tt, 2)
## usando cbind() e rbind()
x <- cbind(x1 = tt, x2 = tt^2 )
x
rbind(x1 = tt, x2 = tt^2 )
dim(x)
dim(x)[1]
dim(x)[2]
## usando matrix(elementos, nrow -> numero de linhas, ncol -> numero de colunas)
matrix(c(4, 2, 9, 1), nrow = 2, ncol = 2)
?matrix
matrix(data = 5, 2, 2)
A <- matrix(1:12, 3, 4)
A
A <- matrix(1:12, 3, 4, T)
A
## acessando elementos da matriz
A[2,2]
A[3,]
A[,4]
# matriz identidade
diag(3)
matirx(c(1, 2, 3, 2, 0, 3), 2, 3, T)
matrix(c(1, 2, 3, 2, 0, 3), 2, 3, T)
B <- matrix(c(1, 2, 3, 2, 0, 3), 2, 3, T)
diag(2)
diag(nrow(B))
I <- diag(nrow(B))
I %*% B
B %*% I
diag(3)
l <-- diag(3)
B %*% l
l <-- diag(ncol(B))
B %*% l
t(B)
B %*% t(B)
t(B) %*% B
l <- diag(ncol(B))
B %*% l
## multiplicação por escalar
a <- 2
a * B
C <- matrix(c(2, 3, -2, 1, 2, 2), 3, 2)
C <- matrix(c(1, 4, -2, 1, 2, 1), 3, 2)
C
B + C
B <- matrix(c(2, 3, -2, 1, 2, 2), 3, 2)
B + C
B <- matrix(c(2, 3, -2, 1, 2, 2), 2, 3)
## multiplicação de matrizes (lembre de verificar compatibilidade de matrizes)
C * B
## multiplicação de matrizes (lembre de verificar compatibilidade de matrizes)
C %*% B
u <- c(1, 2, 3)
u
t(u) %*% u
u %*% t(u)
# matriz de uns
um <- matrix(1, 1, 3)
um
u
um %*% u
sum(u)
#determinante
A <- matrix(c(4, 2, 9, 1), 2, T)
#determinante
A <- matrix(c(4, 2, 9, 1), nrow = 2, byrow = TRUE)
det(A)
setwd("C:/Users/ALN/Documents/REPO TADS/TADS_x_semestre/metodos quantitativos")
#traço de uma matriz quadrada
A  <- matrix(data = seq(from = 1, to = 9, by = 1), nrow=3, byrow=TRUE)
seq(from = 1, to = 9, by = 1)
#traço de uma matriz quadrada
A  <- matrix(data = seq(from = 1, to = 9, by = 1), nrow=3, byrow=TRUE)
#traço de uma matriz quadrada
A  <- matrix(data = seq(from = 1, to = 9, by = 1), nrow=3, byrow=TRUE)
A
diag(A)
sum(diag(A))
library(matrixcalc)
install.packages("matrixcalc")
library(matrixcalc)
matrix.trace(A)
A
X <- (c(1, 1, 1, 3, -2, 1, 2, 1, -1,), nrow = 3, ncol = 3, byrow = T)
X <- (c(1, 1, 1, 3, -2, 1, 2, 1, -1,) nrow = 3 ncol = 3 byrow = T)
X <- matrix(c(1, 1, 1, 3, -2, 1, 2, 1, -1,), nrow = 3, ncol = 3, byrow = T)
X <- matrix(c(1,1,1,3,-2,1,2,1,-1), nrow = 3, ncol = 3, byrow = T)
X
det(X)
solve(X)
round(solve(X)%*%X,1)
solve(X)%*% X
# aplicações de matrizes
#abaixo as notas de cinco alunos em  math,  port e programação
X <- matrix(c(90,   60, 90,
90,   90, 30,
60,   60, 60,
60,   60, 90,
30,   30, 30),byrow=TRUE,nrow = 5,ncol = 3)
X
dim(X)
dim(X)[1]
n <- nrow(X) #mesmo que dim(X)[1]
rep(1, times = n)
n
uns <- matrix(rep(1, times = n), ncol = 1)
uns
t(uns) %*% X #somatória colunas
t(uns)%*%X*(1/n)# médias
uns%*%t(uns)%*%X
uns%*%t(uns)%*%X
uns%*%t(uns)
uns%*%t(uns)%*%X*(1/n) # matriz com colunas de médias
uns%*%t(uns)%*%X*(1/n)
#desvios = X - Xbar ou X - média
D <- X-uns%*%t(uns)%*%X*(1/n) # desvios
D
DD<-t(D)%*%D # desvios ao quadrado
DD
# DD / (n - 1) = Var-Cor
S <- DD*(1/(n-1)) # Var-Cov
S
